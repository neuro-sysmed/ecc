#!/usr/bin/env python3

import argparse
import sys
import os

from tabulate import tabulate


import kbr.config_utils as config_utils
import kbr.log_utils as logger
import kbr.version_utils as version_utils
import kbr.args_utils as args_utils
import kbr.string_utils as string_utils
import kbr.file_utils as file_utils
import kbr.type_utils as type_utils

sys.path.append(".")

import ecc
import ecc.cloudflare_utils as cloudflare_utils
import ecc.ansible_utils as ansible_utils
import ecc.slurm_utils as slurm_utils
import ecc.config_utils as ecc_config_utils

version = version_utils.as_string('ecc')
config = None
program_name = 'ecc-cli'


def init(args):
    global config
    if args.config and os.path.isfile( args.config ):
        config = config_utils.readin_config_file(args.config)
        config = ecc_config_utils.regexify_name_templates( config )
        ecc.set_config(config)

        logger.init(name=program_name, log_file=config.ecc.get('logfile', None))
        logger.set_log_level(args.verbose)
        logger.info(f'{program_name} (v:{version})')

        logger.debug('Connecting to cloud')

        if 'openstack' in config:
            ecc.openstack_connect(config.openstack)
        elif 'azure' in config:
            ecc.azure_connect( config.azure )
        else:
            print('No backend configured, options are: openstack and azure')
        
        if 'cloudflare' in config.ecc:
            cloudflare_utils.init(config.ecc.cloudflare_apikey, config.ecc.cloudflare_email)
    else:
        logger.init(name=program_name) 
        logger.set_log_level(args.verbose)
        logger.info(f'{program_name} (v:{version})')
        logger.critical('No config file available. Either provide one or set export ECC_CONF=...')
        sys.exit()


def add_vms(commands):
    if len(commands) == 0:
        commands.append(1)

    count = 1 
    if len(commands) and type_utils.is_int(commands[0]):
        count = commands.pop(0)
    else:
        count = len(commands)

#    count = args_utils.get_or_default(commands, 1)
    try:
        ecc.create_nodes(cloud_init_file=config.ecc.get('cloud_init', None), count=int(count), hostnames=commands)
    except Exception as e:
        print( e )
        if count != 'help':
            print(f"Error: Unknown command '{count}'\n")


        print("Help:")
        print("==========================")
        print(f"{program_name} create [number, default=1] [hostname]")



def delete_vms(ids: list):
    if 'help' in ids:
        print("Help:")
        print("==========================")
        print(f"{program_name} delete [number, default=1]")
        return

    try:
        count = int(ids[0])
        ecc.delete_nodes(count=count)
    except:
        ecc.delete_nodes(ids=ids)


def list_vms(commands):

    if len(commands) > 0:
        print("Help:")
        print("==========================")
        print(f"{program_name} list")
        return
    else:
        nodes = []
        for node in ecc.nodes_info(update=True).values():
            node['ip'] = ','.join(node['ip'])
            del node['timestamp']
            nodes.append(node)

        print(tabulate(nodes,
                       headers={'vm_id': 'id', 'name': 'name', 'vm_state': 'vm-state', 'slurm_state': 'slurm-state'},
                       tablefmt="psql"))


def list_jobs(commands):

    if len(commands) > 0:
        print("Help:")
        print("==========================")
        print(f"{program_name} jobs")
        return
    else:
        jobs = []
        jobs_by_state = slurm_utils.job_counts_by_state()
        for job_state in jobs_by_state.keys():
            jobs.append({"state": job_state, "count": jobs_by_state[ job_state ]})
        print(tabulate(jobs,
                       headers={'state': 'state', 'count': 'count'},
                       tablefmt="psql"))


def resize(commands):
    if len(commands) == 0 or 'help' in commands:
        print("Help:")
        print("==========================")
        print(f"{program_name} size <nr of servers in cluster> [force]")
        return

    force = False
    if 'force' in commands:
        force = True

    size = int(commands[0])

    nodes = ecc.nodes_info().values()
    if len(nodes) > size:
        logger.info(f'We have to many nodes, will delete {len(nodes) - size}')
        nodes_to_cull = []
        unknown_slurm_state = False
        for n in nodes:
            if n['slurm_state'] == 'na' and force:
                unknown_slurm_state = True
                nodes_to_cull.append(n['vm_id'])
            elif n['slurm_state'] == 'idle':
                nodes_to_cull.append(n['vm_id'])

        if unknown_slurm_state and not force:
            logger.warning('One or more vm is in unknown slurm state, run command with force to re-size')
            return

        delete_vms( nodes_to_cull )
    elif len(nodes) < size:
        logger.info(f'We are a few nodes short, will create {size - len(nodes)}')
        add_vms([size - len(nodes)])
    else:
        logger.info('Nothing to do, we have the perfect number of nodes')


def main():
    commands = ['add', 'delete', 'list', 'size', 'run-playbook', 'init', 'help']

    parser = argparse.ArgumentParser(description=f'ecc_cli: command line tool for ECC ({version})')

    parser.add_argument('-c', '--config', help="ECC config file",
                        default=args_utils.get_env_var('ECC_CONF','ecc.yaml')) 
    parser.add_argument('-v', '--verbose', default=3, action="count", help="Increase the verbosity of logging output")
    parser.add_argument('command', nargs='*', help="{}".format(",".join(commands)))

    args = parser.parse_args()
    init(args)

    #    ecc.update_nodes_status()
    #    sys.exit()



    args_utils.min_count(1, len(args.command),
                         msg="{} takes one of the following commands: {}".format(program_name,
                                                                                 string_utils.comma_sep(commands)))

    command = args.command.pop(0)
    if command == 'list':
        list_vms(args.command)
        sys.exit()
    elif command == 'add':
        add_vms(args.command)
    elif command == 'delete':
        delete_vms(args.command)
        sys.exit()
    elif command == 'size':
        resize(args.command)
        sys.exit()
    elif command == 'run-playbook':
        ansible_utils.run_playbook(config.ecc.ansible_cmd, cwd=config.ecc.ansible_dir)
        sys.exit()
    elif command == 'jobs':
        list_jobs(args.command)
        sys.exit()
    else:
        print("The tool support the following commands: {}\n".format(string_utils.comma_sep(commands)))
        parser.print_usage()
        parser.add_argument('command', nargs='+', help="{}".format(",".join(commands)))
        sys.exit(1)


if __name__ == "__main__":
    main()
