#!/usr/bin/env python3
# 
# 
# 
# 

import pprint
import sys
import os

pp = pprint.PrettyPrinter(indent=4)
import time
import argparse
from munch import Munch

import kbr.config_utils as config_utils
import kbr.log_utils as logger
import kbr.args_utils as args_utils
import kbr.version_utils as version_utils

sys.path.append(".")
import ecc
import ecc.slurm_utils as slurm_utils
import ecc.cloudflare_utils as cloudflare_utils
import ecc.ansible_utils as ansible_utils
import ecc.config_utils as ecc_config_utils


version = version_utils.as_string('ecc')
config = None
program_name = 'eccd'

IDLE_TIME = 300


def init(args):
    global config
    if args.config and os.path.isfile( args.config ):
        config = config_utils.readin_config_file(args.config)
        config = ecc_config_utils.regexify_name_templates( config )

        logger.init(name=program_name, log_file=config.ecc.get('logfile', None))
        logger.set_log_level(args.verbose)
        logger.info(f'{program_name} (v:{version})')


        ecc.set_config(config)
        if 'openstack' in config:
            ecc.openstack_connect(config.openstack)
        elif 'azure' in config:
            ecc.azure_connect( config.azure )
        else:
            print('No backend configured, options are: openstack and azure')
        
        if 'cloudflare' in config.ecc:
            cloudflare_utils.init(config.ecc.cloudflare_apikey, config.ecc.cloudflare_email)
    else:
        logger.init(name=program_name)
        logger.set_log_level(args.verbose)
        logger.info(f'{program_name} (v:{version})')


def update_partition(partition:str=None):
    if partition is not None:
        print( f"Updating partition: '{partition}'")
    else:
        print( f"Updating all nodes in partitions")


    ecc.slurm_idle_drained_nodes(partition=partition)

    nodes_min = config.ecc.get('nodes_min',0)
    if partition is not None:
        nodes_min = config.queues[ partition].nodes_min

    nodes_max = config.ecc.get('nodes_max',10)
    if partition is not None:
        nodes_max = config.queues[ partition ].nodes_max

    idle_time = config.queues[ partition].get('idle_time', IDLE_TIME)

    nodes_total = ecc.nodes_total(partition=partition)
    unregistered_nodes = ecc.unregistered_nodes(partition=partition)
    nodes_idle = ecc.nodes_idle_timelimit(limit=idle_time, partition=partition)
    jobs_pending = slurm_utils.jobs_pending(partition=partition)
    pending_time = slurm_utils.pending_time(partition=partition)


    print(f"nodes_total: {nodes_total}, nodes_idle: {len(nodes_idle)}, jobs_pending: {jobs_pending}")
    print(f"mean pending time: {pending_time['pending_mean']}, max pending time: {pending_time['max']} configured idle time: {idle_time}")

    # this should not happen anymore as we wait for the server to come online before running the ecc-playbook
    if unregistered_nodes != []:
        logger.info('running playbook to pickup missing nodes...')
        ansible_utils.run_playbook(config.ecc.ansible_cmd, cwd=config.ecc.ansible_dir)

     # Below the min number of nodes needed for our setup
    elif nodes_total < nodes_min:
        logger.info("We are below the min number of nodes, creating {} nodes".format(
        nodes_min - nodes_total))

        ecc.create_nodes(count=nodes_min - nodes_total, 
                         name_regex=config.queues[ partition].name_regex, 
                         name_template=config.queues[ partition].name_template,
                         vm_size=config.queues[ partition].get('vm_size', None))

    ### there are jobs queuing, let see what we should do
    # Got room to make some additional nodes
    elif jobs_pending and pending_time['pending_mean'] >= idle_time and nodes_total < int(nodes_max):

        logger.info("We got stuff to do and long pending times, creating an additional node...")
        ecc.create_nodes(count=1, 
                         name_regex=config.queues[ partition].name_regex, 
                         name_template=config.queues[ partition].name_template,
                         vm_size=config.queues[ partition].get('vm_size', None) )

    # We got extra nodes not needed and we can delete some without going under the min cutoff, so lets get rid of some
    elif nodes_idle:


        logger.info(f"Deleting {nodes_idle} idle nodes... ")
        ecc.delete_idle_nodes(nodes_to_cull=nodes_idle)

    else:
        logger.info("Nothing to change.")



def run_daemon() -> None:
    """ Creates the ecc daemon loop that creates and destroys nodes etc.
    """

    while (True):
        # get the current number of nodes and jobs
        ecc.update_nodes_status()

        # pretty hackey, but if no queues defined, run with "default"
        for queue in config.get('queues', [None]):
            update_partition( partition=queue )

        logger.info("Napping for {} second(s).".format(config.ecc.sleep))
        time.sleep(config.ecc.sleep)



def main():

    parser = argparse.ArgumentParser(description='eccd: the ecc daemon to be run on the master node ')
    parser.add_argument('-l', '--logfile', default=None, help="Logfile to write to, default is stdout")
    parser.add_argument('-v', '--verbose', default=4, action="count", help="Increase the verbosity of logging output")
    parser.add_argument('-c', '--config', help="ECC config file",
                        default=args_utils.get_env_var('ECC_CONF','ecc.yaml')) 

    args = parser.parse_args()
    init(args)
    run_daemon()


if __name__ == '__main__':
    main()
else:
    print("Not to be run as a library")
    sys.exit(1)
